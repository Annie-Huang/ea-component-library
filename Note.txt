https://forum.primefaces.org/
https://forum.primefaces.org/viewtopic.php?p=159783#p159783
https://stackoverflow.com/questions/50111036/angular-ngc-or-tsc
https://stackoverflow.com/questions/46087105/angular-aot-compilation-ng-vs-ngc
https://stackoverflow.com/questions/44642696/whats-the-relationship-and-difference-between-ng-build-and-ngc
http://www.gistia.com/angular-performance-two-strategies/
https://github.com/angular/angular-cli/wiki/stories-css-preprocessors
https://www.learnstorybook.com/
https://github.com/storybooks/storybook/issues/125
https://github.com/storybooks/storybook/issues/4481
D:\Temp\Test\car-show>npx -p @storybook/cli sb init
https://github.com/angular/angular-cli/issues/4778
Juri Strumpflohner - Create and publish Angular libs like a Pro (https://www.youtube.com/watch?v=K4YMmwxGKjY)
https://angular.io/guide/deployment
https://www.tsmean.com/articles/how-to-write-a-typescript-library/angular/
https://github.com/nrwl/nx/issues/225
https://medium.com/@SirMaxxx/angular-6-creating-a-shareable-control-library-6a27f0ebe5c2


How to create a component:
#################################
(For component itself...)
===========================
- In D:\Temp\ea-component-library\src\app\components\, create your component folder. E.g. button. And add the following files:
    * button.scss
    * button.spec.ts
    * button.ts
    Note:
    o You cannot have separate html file as component library requires INLINE HTML (e.g. it will not able to find https://<the-app-that-use-your-library>/button.html).
      You can initially have button.html to test it locally (it will work in local npm run start). When it's ready, put it back in the the button.ts file.
      Basically use template with ``, not templateUrl: ['./button.html']
    o You cannot link style file into ts file as component library requires INLINE STYLING (e.g. it will not able to find https://<the-app-that-use-your-library>/button.scss).
      Basically you can use styles: [""], not styleUrls: ['./button.scss']
      At the moment, the button.scss file is bundle up correctly in build and package, so you can put style there and it will apply to the element both locally and in npm package.
      But remember to use class name that is unique to your element. E.g. ea-button as a class name.
    o If your button.scss refers to an image, put the images into D:\Temp\ea-component-library\src\images and put url as relative path. E.g. url('image/xxx.png')
      (src\images is set as assets in angular.json. During the "build-redistribute", the whole src\images will be copy into resource\images folder so the relative path in eauicomp.css works)



- In D:\Temp\ea-component-library\src\assets\showcase\css\eauicomp.css, E.g.
    @import '../../../app/components/button/button.scss';

- In D:\Temp\ea-component-library\exports, create the component files:
    * button.js
    * button.d.js
    Note: The ./components/button/button location mentioned in both files will be generated through "build-components" script in package.json

- In D:\Temp\ea-component-library\eauicomp.js, add the component files. E.g.
    __export(require("./components/button/button"));

- In D:\Temp\ea-component-library\eauicomp.d.ts, add the component files. E.g.
    export * from './components/button/button';


(For Demo page...)
======================
- In D:\Temp\ea-component-library\src\app\showcase\components, create your demo page folder. E.g. button. And add the following files.
    * buttondemo.html
    * buttondemo.module.ts
    * buttondemo.ts
    * buttondemo-routing.module.ts
    - Add in the necessary files for D:\Temp\ea-component-library\src\app\showcase\service and D:\Temp\ea-component-library\src\app\showcase\domain if necessary.

- In D:\Temp\ea-component-library\src\app\showcase\app-routing.module.ts, add the routing link, E.g.
            {path: 'button', loadChildren: './components/button/buttondemo.module#ButtonDemoModule'},

- In D:\Temp\ea-component-library\src\app\showcase\app.component.html, create the link to the new demo page. E.g.
                <a id="button_menutitle" #buttonmenutitle [class.active-menuitem]="buttonmenutitle.id == activeMenuId" (click)="activeMenuId = (activeMenuId === buttonmenutitle.id ? null : buttonmenutitle.id)">
                    <img src="assets/showcase/images/icons/button-active.svg" class="layout-menu-icon-active"/>
                    <img src="assets/showcase/images/icons/button.svg" class="layout-menu-icon-inactive"/>
                    <span>Button</span>
                </a>
                <div [ngClass]="{'submenushow': (buttonmenutitle.id == activeMenuId), 'submenuhide': (buttonmenutitle.id != activeMenuId)}">
                    <a [routerLink]="['/button']" (click)="menuActive = false">&#9679; Button</a>
                    <a [routerLink]="['/splitbutton']" (click)="menuActive = false">&#9679; SplitButton</a>
                </div>


Files that don't need to be touched
=======================================
- D:\Temp\ea-component-library\resources\eauicomp.css. From the gulp task, it was taking out from common.scss and each component's scss files, compiled them into css and concat into eauicomp.css and put into resource folder.


How to build production build for the npm package:
#####################################################
- Run "npm run build-redistribute" to create the distribution file.
    * D:\Temp\ea-component-library\components will be generated through "build-components"
    * D:\Temp\ea-component-library\resources will be generated through "build-assets"
    * D:\Temp\ea-component-library\*.d.ts and
      D:\Temp\ea-component-library\*.js
      (except for D:\Temp\ea-component-library\eauicomp.d.ts and
                  D:\Temp\ea-component-library\eauicomp.js)
      Are generated through "build-exports", basically copy all D:\Temp\ea-component-library\exports\* into D:\Temp\ea-component-library\ folder

- Run "npm pack" to create the tar file, e.g. primeng-7.0.1-SNAPSHOT.tgz


How to publish to npm:
#########################################
You will need to upzip the tgz generated by the "npm pack" command above, and then go to package folder
You will need to make sure you are in the package directory before you log into npm. If you ever change directory, redo login again.
Always check "npm whoami" to make sure you are as your npm login, not your pc login.

bradleys-mbp:package anniehuang$ npm login
Username: annie.huang
Password:
Email: (this IS public) annie.hn@gmail.com
Logged in as annie.huang on https://registry.npmjs.org/.
bradleys-mbp:package anniehuang$ npm whoami
annie.huang
bradleys-mbp:package anniehuang$ npm version
{ 'ea-c-l-test': '0.0.1',
  npm: '5.6.0',
  ares: '1.10.1-DEV',
  cldr: '32.0',
  http_parser: '2.7.0',
  icu: '60.1',
  modules: '57',
  nghttp2: '1.25.0',
  node: '8.10.0',
  openssl: '1.0.2n',
  tz: '2017c',
  unicode: '10.0',
  uv: '1.19.1',
  v8: '6.2.414.50',
  zlib: '1.2.11' }
bradleys-mbp:package anniehuang$ npm version 0.0.5	<< If you need to change version no for every publish.
v0.0.5
bradleys-mbp:package anniehuang$ npm version
{ 'ea-c-l-test': '0.0.5',                           << Make sure the version number has changed.
  npm: '5.8.0',
  ares: '1.10.1-DEV',
  cldr: '32.0',
  http_parser: '2.7.0',
  icu: '60.1',
  modules: '57',
  nghttp2: '1.25.0',
  node: '8.10.0',
  openssl: '1.0.2n',
  tz: '2017c',
  unicode: '10.0',
  uv: '1.19.1',
  v8: '6.2.414.50',
  zlib: '1.2.11' }
bradleys-mbp:package anniehuang$ npm publish
+ ea-c-l-test@0.0.1

Or you can do:
npm publish /Users/anniehuang/projects/ea-component-library/ea-c-l-test-0.0.1.tgz
Or if you want to install without publish, go to your other application and do:
npm install ../ea-component-library/ea-c-l-test-0.0.1.tgz


How to install ea-c-l-test in your project:
#################################################
bradleys-mbp:my-angular-app anniehuang$ npm install ea-c-l-test
+ ea-c-l-test@0.0.1

In angular.json file, add the following for style
"styles": [
  "node_modules/ea-c-l-test/resources/themes/nova-light/theme.css",
  "node_modules/ea-c-l-test/resources/eauicomp.min.css"
  //...
],

In app.module.ts, import the module you need to use, e.g.
import {ButtonModule} from 'ea-c-l-test/eauicomp';
...
  imports: [
    BrowserModule,
    AppRoutingModule,
    ButtonModule
  ],


How to build production and test production build locally:
#########################################################################
bradleys-mbp:ea-component-library anniehuang$ npm install -g http-server
bradleys-mbp:ea-component-library anniehuang$ npm run build-prod
bradleys-mbp:ea-component-library anniehuang$ cd ./dist/ea-component-library/           << Need to get to the location where index.html locates
bradleys-mbp:ea-component-library anniehuang$ http-server -o


What to do to strip repo as a basic system (with button as the only one component):
#######################################################################################################
- D:\Temp\ea-component-library\src\app\showcase\app.component.html,         comment out all the routerLink and left only [routerLink]="['/button']"
- D:\Temp\ea-component-library\src\app\showcase\app-routing.module.ts       comment all path except for '', 'setup', 'theming', 'icons', 'button', 'support'
- D:\Temp\ea-component-library\src\app\showcase\components\*                removed all folders except for 'button', 'home', 'icons', 'setup', 'support', 'theming'
- D:\Temp\ea-component-library\src\app\showcase\domain\                     removed folder
- D:\Temp\ea-component-library\src\app\showcase\service\*                   removed carservice.ts, countryservice.ts, eventservice.ts, nodeservice.ts, only key 'iconservice.ts'
- D:\Temp\ea-component-library\src\app\showcase\app.module.ts               removed reference to CarService, CountryService, EventService, NodeService
- D:\Temp\ea-component-library\src\app\components\*                         removed all except for button, autocomplete, codehighlighter and the dependentcy of these 3 modules.
- D:\Temp\ea-component-library\src\app\components\common\*                  removed all except for those required by button, autocomplete, codehighlighter.
- D:\Temp\ea-component-library\src\app\components\common\api.ts             updated to only keep those required by button, autocomplete, codehighlighter.
- D:\Temp\ea-component-library\src\assets\showcase\css\eauicomp.css         updated to only keep those required by button, autocomplete, codehighlighter. (used to call D:\Temp\ea-component-library\src\assets\showcase\css\primeng.css)
- D:\Temp\ea-component-library\exports                                      removed all excepted for api, autocomplete, button, codehighlighter inputtext, shared, tabview, tooltip. (to match D:\Temp\ea-component-library\src\app\components)
- D:\Temp\ea-component-library\eauicomp.js                                  removed all excepted for api, autocomplete, button, codehighlighter inputtext, shared, tabview, tooltip. (used to call D:\Temp\ea-component-library\primeng.js)
- D:\Temp\ea-component-library\eauicomp.d.ts                                removed all excepted for api, autocomplete, button, codehighlighter inputtext, shared, tabview, tooltip. (used to call D:\Temp\ea-component-library\primeng.d.ts)



